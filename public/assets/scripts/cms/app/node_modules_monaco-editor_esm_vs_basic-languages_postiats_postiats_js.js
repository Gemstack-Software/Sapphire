"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksapphire"] = self["webpackChunksapphire"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_postiats_postiats_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.43.0(94c055bcbdd49f04a0fa15515e848542a79fb948)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"abstype\",\n    \"abst0ype\",\n    \"absprop\",\n    \"absview\",\n    \"absvtype\",\n    \"absviewtype\",\n    \"absvt0ype\",\n    \"absviewt0ype\",\n    \"as\",\n    \"and\",\n    \"assume\",\n    \"begin\",\n    \"classdec\",\n    \"datasort\",\n    \"datatype\",\n    \"dataprop\",\n    \"dataview\",\n    \"datavtype\",\n    \"dataviewtype\",\n    \"do\",\n    \"end\",\n    \"extern\",\n    \"extype\",\n    \"extvar\",\n    \"exception\",\n    \"fn\",\n    \"fnx\",\n    \"fun\",\n    \"prfn\",\n    \"prfun\",\n    \"praxi\",\n    \"castfn\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"ifcase\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"prefix\",\n    \"postfix\",\n    \"implmnt\",\n    \"implement\",\n    \"primplmnt\",\n    \"primplement\",\n    \"import\",\n    \"let\",\n    \"local\",\n    \"macdef\",\n    \"macrodef\",\n    \"nonfix\",\n    \"symelim\",\n    \"symintr\",\n    \"overload\",\n    \"of\",\n    \"op\",\n    \"rec\",\n    \"sif\",\n    \"scase\",\n    \"sortdef\",\n    \"sta\",\n    \"stacst\",\n    \"stadef\",\n    \"static\",\n    \"staload\",\n    \"dynload\",\n    \"try\",\n    \"tkindef\",\n    \"typedef\",\n    \"propdef\",\n    \"viewdef\",\n    \"vtypedef\",\n    \"viewtypedef\",\n    \"prval\",\n    \"var\",\n    \"prvar\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"withtype\",\n    \"withprop\",\n    \"withview\",\n    \"withvtype\",\n    \"withviewtype\"\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    \"$ldelay\",\n    \"$arrpsz\",\n    \"$arrptrsize\",\n    \"$d2ctype\",\n    \"$effmask\",\n    \"$effmask_ntm\",\n    \"$effmask_exn\",\n    \"$effmask_ref\",\n    \"$effmask_wrt\",\n    \"$effmask_all\",\n    \"$extern\",\n    \"$extkind\",\n    \"$extype\",\n    \"$extype_struct\",\n    \"$extval\",\n    \"$extfcall\",\n    \"$extmcall\",\n    \"$literal\",\n    \"$myfilename\",\n    \"$mylocation\",\n    \"$myfunction\",\n    \"$lst\",\n    \"$lst_t\",\n    \"$lst_vt\",\n    \"$list\",\n    \"$list_t\",\n    \"$list_vt\",\n    \"$rec\",\n    \"$rec_t\",\n    \"$rec_vt\",\n    \"$record\",\n    \"$record_t\",\n    \"$record_vt\",\n    \"$tup\",\n    \"$tup_t\",\n    \"$tup_vt\",\n    \"$tuple\",\n    \"$tuple_t\",\n    \"$tuple_vt\",\n    \"$break\",\n    \"$continue\",\n    \"$raise\",\n    \"$showtype\",\n    \"$vcopyenv_v\",\n    \"$vcopyenv_vt\",\n    \"$tempenver\",\n    \"$solver_assert\",\n    \"$solver_verify\"\n  ],\n  keywords_srp: [\n    \"#if\",\n    \"#ifdef\",\n    \"#ifndef\",\n    \"#then\",\n    \"#elif\",\n    \"#elifdef\",\n    \"#elifndef\",\n    \"#else\",\n    \"#endif\",\n    \"#error\",\n    \"#prerr\",\n    \"#print\",\n    \"#assert\",\n    \"#undef\",\n    \"#define\",\n    \"#include\",\n    \"#require\",\n    \"#pragma\",\n    \"#codegen2\",\n    \"#codegen3\"\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  keywords_effects: [\n    \"0\",\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n  ],\n  operators: [\n    \"@\",\n    \"!\",\n    \"|\",\n    \"`\",\n    \":\",\n    \"$\",\n    \".\",\n    \"=\",\n    \"#\",\n    \"~\",\n    \"..\",\n    \"...\",\n    \"=>\",\n    \"=<>\",\n    \"=/=>\",\n    \"=>>\",\n    \"=/=>>\",\n    \"<\",\n    \">\",\n    \"><\",\n    \".<\",\n    \">.\",\n    \".<>.\",\n    \"->\",\n    \"-<>\"\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n          }\n        }\n      },\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      [/.*/, \"comment\"]\n    ],\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js\n");

/***/ })

}]);